// Generated by CoffeeScript 1.5.0
(function() {
  var root,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  root.__addMethod = function(name, f) {
    if (typeof f !== 'function') {
      throw new TypeError('Expected a function, got something else');
    }
    if (this.prototype[name] == null) {
      return this.prototype[name] = f;
    }
  };

  _([Object, Number, String, Date]).each(function(obj) {
    return obj.define = __addMethod;
  });

  Number.prototype.errVal = void 0;

  Number.define('toInt', function() {
    return parseInt(this);
  });

  Number.define('toF', function() {
    return parseFloat(this);
  });

  Number.define('plus', function(x) {
    var f;
    if ((f = this.toF() + x.toF())) {
      return f;
    } else {
      return this.errVal;
    }
  });

  Number.define('minus', function(x) {
    var f;
    if ((f = this.toF() - x.toF())) {
      return f;
    } else {
      return this.errVal;
    }
  });

  Number.define('by', function(x) {
    var f;
    if ((f = this.toF() * x.toF())) {
      return f;
    } else {
      return this.errVal;
    }
  });

  Number.define('divideBy', function(x) {
    var f;
    if ((f = this.toF() / x.toF())) {
      return f;
    } else {
      return this.errVal;
    }
  });

  if (String.prototype.trim == null) {
    String.prototype.trim = function() {
      return this.replace(/^\s+|\s+$/g, "");
    };
  }

  if (String.prototype.ltrim == null) {
    String.prototype.ltrim = function() {
      return this.replace(/^\s+/g, "");
    };
  }

  if (String.prototype.rtrim == null) {
    String.prototype.rtrim = function() {
      return this.replace(/\s+$/g, "");
    };
  }

  if (String.prototype.unslash == null) {
    String.prototype.unslash = function() {
      return this.replace(/^\/+|\/+$/g, "");
    };
  }

  if (String.prototype.capitalize == null) {
    String.prototype.capitalize = function() {
      return this.charAt(0).toUpperCase() + this.slice(1);
    };
  }

  if (String.prototype.camelize == null) {
    String.prototype.camelize = function() {
      return _.map(this.split(/\s|_|-/), function(str) {
        return str.capitalize();
      }).join('');
    };
  }

  if (String.prototype.underscored == null) {
    String.prototype.underscored = function() {
      return this.replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    };
  }

  if (String.prototype.army == null) {
    String.prototype.army = function(n) {
      var r;
      r = [];
      while (r.length < n) {
        r.push(this);
      }
      return r.join("");
    };
  }

  if (String.prototype.leftFill == null) {
    String.prototype.leftFill = function(string, resultLength) {
      return (string.army(resultLength) + this).slice(resultLength * (-1));
    };
  }

  root = this;

  root.Sharkbone = {
    Version: '0.1.0',
    Config: {},
    Modules: {},
    ClassModules: {},
    App: {
      Models: {},
      Collections: {},
      Views: {},
      Routers: {},
      Modules: {},
      Initializers: {
        initializeRouters: function(opts) {
          if (opts == null) {
            opts = this.options;
          }
          return this.activeRouters = _(this.Routers).map(function(router) {
            return new router(opts);
          });
        },
        setupBackboneRelational: function() {
          if (Backbone.RelationalModel != null) {
            return _(this.Models).invoke('setup');
          }
        }
      },
      activeRouters: [],
      options: {
        pushState: false
      },
      initialize: function() {
        var _this = this;
        _(this.Initializers).each(function(init) {
          return init.call(_this, _this.options);
        });
        return Backbone.history.start();
      }
    }
  };

  Sharkbone.Mixin = (function() {

    function Mixin() {}

    Mixin.mixinCallbacks = ['beforeInclude', 'beforeExtend', 'included', 'extended'];

    Mixin.extend = function(obj) {
      var proto, _ref, _ref1,
        _this = this;
      proto = typeof obj === 'object' ? obj : obj.prototype;
      if ((_ref = proto.beforeExtend) != null) {
        _ref.apply(this, proto);
      }
      _.each(Object.keys(proto), function(key) {
        if (__indexOf.call(_this.mixinCallbacks, key) < 0) {
          return _this[key] = proto[key];
        }
      });
      if ((_ref1 = proto.extended) != null) {
        _ref1.apply(this, proto);
      }
      return this;
    };

    Mixin.include = function(obj) {
      var proto, _ref, _ref1,
        _this = this;
      proto = typeof obj === 'object' ? obj : obj.prototype;
      if ((_ref = proto.beforeInclude) != null) {
        _ref.apply(this, proto);
      }
      _.each(Object.keys(proto), function(key) {
        if (__indexOf.call(_this.mixinCallbacks, key) < 0) {
          return _this.prototype[key] = proto[key];
        }
      });
      if ((_ref1 = proto.included) != null) {
        _ref1.apply(this, proto);
      }
      return this;
    };

    return Mixin;

  })();

  Sharkbone.Shared = (function() {

    function Shared() {}

    Shared.prototype.appNamespace = function() {
      return 'Sharkbone.App.';
    };

    return Shared;

  })();

  Sharkbone.Modules.NavigationHelpers = {
    goToIndex: function() {
      return Backbone.history.location.assign(this.indexPath());
    },
    goToShow: function() {
      return Backbone.history.location.assign(this.showPath());
    }
  };

  Sharkbone.Modules.RouteHelpers = {
    getRootPath: function(model) {
      var _ref, _ref1;
      return (model != null ? model.urlRoot : void 0) || ((_ref = this.model) != null ? _ref.urlRoot : void 0) || ((_ref1 = this.collection) != null ? _ref1.url : void 0);
    },
    getResourceId: function(model) {
      var _ref;
      return (model != null ? model.id : void 0) || ((_ref = this.model) != null ? _ref.id : void 0);
    },
    indexPath: function(model) {
      var urlRoot;
      urlRoot = this.getRootPath(model);
      return "#" + urlRoot;
    },
    showPath: function(direction, value, attribute, model) {
      var id, urlRoot;
      urlRoot = this.getRootPath(model);
      id = this.getResourceId(model);
      return "#" + urlRoot + "/" + id;
    },
    editPath: function(direction, value, attribute, model) {
      return "" + (this.showPath.apply(this, arguments)) + "/edit";
    }
  };

  Sharkbone.ViewManager = (function() {

    function ViewManager() {}

    _.extend(ViewManager, Sharkbone.Mixin);

    ViewManager.prototype.getDesktop = function() {
      return this.desktop || (this.desktop = new Sharkbone.Desktop());
    };

    ViewManager.prototype.clearWorkSpace = function(workSpace) {
      return this.getDesktop().clear(workSpace);
    };

    ViewManager.prototype.renderOn = function(container, view, viewData) {
      return $(container).html(new view(viewData).render().el);
    };

    ViewManager.include(Sharkbone.Modules.NavigationHelpers);

    ViewManager.include(Sharkbone.Modules.RouteHelpers);

    return ViewManager;

  })();

  Sharkbone.Desktop = (function() {

    function Desktop() {}

    _.extend(Desktop, Sharkbone.Mixin);

    Desktop.prototype.layouts = {
      "default": {},
      login: {}
    };

    Desktop.prototype.activeLayoutName = 'default';

    Desktop.prototype.layout = function() {
      return this.layouts[this.activeLayoutName];
    };

    Desktop.prototype.getLayout = function() {
      return this.layouts[this.activeLayoutName];
    };

    Desktop.prototype.clear = function(target) {
      var workSpace;
      workSpace = target != null ? this.getLayout()[target] : this.getLayout();
      if (typeof workSpace === 'function') {
        workSpace = workSpace();
      }
      if (workSpace.html != null) {
        workSpace.html('');
      } else {
        _.each(_.values(workSpace), function(container) {
          if (typeof container === 'function') {
            container = container();
          }
          if (container.html != null) {
            return container.html('');
          }
        });
      }
      return this.afterClear(workSpace, target);
    };

    Desktop.prototype.afterClear = function(workSpace, target) {
      var _this = this;
      return _.each(this._afterClear, function(callback, key) {
        return callback != null ? callback.call(_this, workSpace, target) : void 0;
      });
    };

    return Desktop;

  })();

  Sharkbone.Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      Router.__super__.constructor.apply(this, arguments);
    }

    _.extend(Router, Sharkbone.Mixin);

    Router.include(Sharkbone.ViewManager);

    Router.defaultCollectionName = function() {
      return this.name.replace(/router|controller/gi, '');
    };

    Router.collectionClass = function() {
      return (typeof this.defaultCollectionName === "function" ? this.defaultCollectionName() : void 0) || this.defaultCollectionName;
    };

    Router.collectionName = function() {
      return ((typeof this.collectionClass === "function" ? this.collectionClass() : void 0) || this.collectionClass).underscored();
    };

    Router.resources = function(collectionName) {
      var _base;
      collectionName || (collectionName = (typeof this.collectionName === "function" ? this.collectionName() : void 0) || this.collectionName);
      (_base = this.prototype).routes || (_base.routes = {});
      this.prototype.routes["" + collectionName + "/index"] = 'index';
      this.prototype.routes["" + collectionName] = 'index';
      this.prototype.routes["" + collectionName + "/new"] = 'newModel';
      this.prototype.routes["" + collectionName + "/:id/edit"] = 'edit';
      return this.prototype.routes["" + collectionName + "/:id"] = 'show';
    };

    Router.prototype.initialize = function() {
      var _base, _name;
      Router.__super__.initialize.apply(this, arguments);
      return this.collection = typeof (_base = Sharkbone.App.Collections)[_name = this.constructor.collectionClass()] === "function" ? new _base[_name]() : void 0;
    };

    Router.prototype.loadDefaultData = function() {
      return this.collection.fetch();
    };

    Router.prototype.getResource = function(id) {
      this.model = this.collection.get(id) || new this.collection.model({
        id: id
      });
      this.model.fetch();
      return this.model;
    };

    return Router;

  })(Backbone.Router);

  Sharkbone.Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection() {
      Collection.__super__.constructor.apply(this, arguments);
    }

    _.extend(Collection, Sharkbone.Mixin);

    Collection.prototype.initialize = function() {
      return Collection.__super__.initialize.apply(this, arguments);
    };

    if (Backbone.Paginator.requestPager != null) {
      Collection.prototype.DefaultPagesInRange = 4;
      Collection.prototype.paginator_core = {
        dataType: 'json',
        url: function() {
          return this.url;
        }
      };
      Collection.prototype.paginator_ui = {
        firstPage: 1,
        currentPage: 1,
        perPage: 20,
        totalPages: 10,
        pageLinks: {
          wrapperTag: 'ul',
          defaultClass: '',
          disabledClass: 'disabled',
          numberedPageOptions: {
            "class": 'page-marker',
            selectedClass: 'disabled',
            unselectedClass: ''
          },
          first: {
            label: '<<',
            "class": 'first-page',
            disabledClass: 'no-page',
            isEnabled: function() {
              return this.currentPage > this.firstPage;
            }
          },
          prev: {
            label: '<',
            "class": 'prev-page',
            disabledClass: 'no-page',
            isEnabled: function() {
              return this.currentPage > this.firstPage;
            }
          },
          next: {
            label: '>',
            "class": 'next-page',
            disabledClass: 'no-page',
            isEnabled: function() {
              return this.currentPage < this.lastPage;
            }
          },
          last: {
            label: '>>',
            "class": 'last-page',
            disabledClass: 'no-page',
            isEnabled: function() {
              return this.currentPage < this.lastPage;
            }
          }
        }
      };
      Collection.prototype.server_api = {
        page: function() {
          return this.currentPage;
        },
        per_page: function() {
          return this.perPage;
        }
      };
      Collection.prototype.isCurrentPage = function(n) {
        return this.currentPage === n;
      };
      Collection.prototype.getMinPage = function() {
        this._minPage = this.currentPage - (this.pagesInRange || this.DefaultPagesInRange);
        if (this._minPage < this.firstPage) {
          this._minPage = this.firstPage;
        }
        return this._minPage;
      };
      Collection.prototype.getMaxPage = function() {
        this._maxPage = this.currentPage + (this.pagesInRange || this.DefaultPagesInRange);
        if (this._maxPage > this.lastPage) {
          this._maxPage = this.lastPage;
        }
        return this._maxPage;
      };
      Collection.prototype.getDisplayPages = function() {
        var _i, _ref, _ref1, _results;
        return (function() {
          _results = [];
          for (var _i = _ref = this.getMinPage(), _ref1 = this.getMaxPage(); _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
      };
      Collection.prototype.getPageNumberLink = function(n) {
        return "<li class=\"" + (this.getPageNumberLinkClass(n)) + "\" data-value=\"" + n + "\"><a href=\"#\">" + n + "</a></li>";
      };
      Collection.prototype.getPageNumberLinkClass = function(n) {
        return "" + this.pageLinks.defaultClass + " " + this.pageLinks.numberedPageOptions["class"] + " " + (this.getExtraClassFor(n));
      };
      Collection.prototype.getExtraClassFor = function(n) {
        if (this.isCurrentPage(n)) {
          return this.pageLinks.numberedPageOptions.selectedClass;
        } else {
          return this.pageLinks.numberedPageOptions.unselectedClass;
        }
      };
      Collection.prototype.getPageControl = function(control) {
        return "<li class=\"" + (this.getPageControlClass(control)) + "\"><a href=\"#\">" + this.pageLinks[control].label + "</a></li>";
      };
      Collection.prototype.getPageControlClass = function(control) {
        if (this.pageLinks[control].isEnabled.apply(this)) {
          return this.getEnabledPageControlClass(control);
        } else {
          return this.getDisabledPageControlClass(control);
        }
      };
      Collection.prototype.getEnabledPageControlClass = function(control) {
        return "" + this.pageLinks.defaultClass + " " + this.pageLinks[control]["class"];
      };
      Collection.prototype.getDisabledPageControlClass = function(control) {
        return "" + this.pageLinks.defaultClass + " " + this.pageLinks.disabledClass + " " + this.pageLinks[control].disabledClass;
      };
      Collection.prototype.parse = function(response) {
        this.paginator_ui.count = response.count;
        this.lastPage = this.availablePages = Math.ceil(response.count / this.perPage);
        return response.results;
      };
      Collection.prototype.getPager = function() {
        if (this.lastPage <= 1) {
          return '';
        }
        return ("<" + this.pageLinks.wrapperTag + ">") + this.getPageControl('first') + this.getPageControl('prev') + _.map(this.getDisplayPages(), this.getPageNumberLink, this).join('') + this.getPageControl('next') + this.getPageControl('last') + ("</" + this.pageLinks.wrapperTag + ">");
      };
    }

    return Collection;

  })(Backbone.Paginator.requestPager || Backbone.Collection);

  Sharkbone.Modules.Relational = {
    setupRelations: function() {
      var _this = this;
      if (this.relations != null) {
        return _.each(this.relations, function(rel) {
          return _this.get(rel.key).url = "" + (_this.urlRoot.unslash()) + "/" + (_this.get('id')) + "/" + rel.key;
        });
      }
    },
    fetchCollections: function() {
      var _this = this;
      if (this.isNew()) {
        return false;
      }
      return _(this.relations).chain().filter(function(rel) {
        return rel.type === Backbone.HasMany;
      }).pluck('key').each(function(key) {
        return _this.get(key).fetch();
      }).value();
    },
    createDotSyntaxCollectionGetters: function() {
      var _this = this;
      return _(this.relations).chain().pluck('key').each(function(key) {
        return _this[key] = function() {
          return this.get(key);
        };
      });
    },
    toJSON: function() {
      var attrs,
        _this = this;
      if ((Sharkbone.Config.ActiveRecord != null) && Sharkbone.Config.ActiveRecord) {
        attrs = _(this.attributes).clone();
        _(this.relations).each(function(relation) {
          if (attrs[relation.key].length > 0) {
            attrs["" + relation.key + "_attributes"] = _(attrs[relation.key]).clone();
          }
          return delete attrs[relation.key];
        });
        return attrs;
      } else {
        return Backbone.Model.prototype.toJSON.apply(this, arguments);
      }
    }
  };

  Sharkbone.ClassModules.Relational = {
    hasMany: function(key, options) {
      if (options == null) {
        options = {};
      }
      if (!key) {
        throw new Error('HasMany relations require a key');
      }
      this.prototype.relations = this.prototype.relations || [];
      _.extend(options, {
        type: Backbone.HasMany,
        key: key
      });
      _.defaults(options, {
        relatedModel: "" + (this.appNamespace()) + "Models." + (_.singularize(key).camelize()),
        collectionType: "" + (this.appNamespace()) + "Collections." + (_.pluralize(key).camelize())
      });
      return this.prototype.relations.push(options);
    },
    hasOne: function(key, options) {
      if (options == null) {
        options = {};
      }
      if (!key) {
        throw new Error('HasOne relations require a key');
      }
      this.prototype.relations = this.prototype.relations || [];
      _.extend(options, {
        type: Backbone.HasOne,
        key: key
      });
      _.defaults(options, {
        relatedModel: "" + (this.appNamespace()) + "Models." + (_.singularize(key).camelize())
      });
      return this.prototype.relations.push(options);
    }
  };

  Sharkbone.Model = (function(_super) {

    __extends(Model, _super);

    function Model() {
      Model.__super__.constructor.apply(this, arguments);
    }

    _.extend(Model, Sharkbone.Mixin);

    Model.extend(Sharkbone.Shared);

    Model.prototype.initialize = function() {
      var _this = this;
      Model.__super__.initialize.apply(this, arguments);
      if (Backbone.RelationalModel != null) {
        this.on('change:id', function() {
          return _this.setupRelations.apply(_this);
        });
      }
      if (typeof this.setupRelations === "function") {
        this.setupRelations();
      }
      return typeof this.fetchCollections === "function" ? this.fetchCollections() : void 0;
    };

    if (Backbone.RelationalModel != null) {
      Model.include(Sharkbone.Modules.Relational);
      Model.extend(Sharkbone.ClassModules.Relational);
    }

    return Model;

  })(Backbone.RelationalModel || Backbone.Model);

  Sharkbone.Modules.CUDCallbacks = {
    _afterSuccessfulCreate: [],
    _afterSuccessfulUpdate: [],
    _afterSuccessfulDestroy: [],
    _afterFailingCreate: [],
    _afterFailingUpdate: [],
    _afterFailingDestroy: [],
    initializeDefaultCallbacks: function() {
      this.afterCreate(this.remove);
      this.afterCreate(this.goToShow);
      this.afterUpdate(this.remove);
      this.afterUpdate(this.goToShow);
      this.afterDestroy(this.goToIndex);
      return this;
    },
    initializeCudContainers: function() {
      this._afterSuccessfulCreate = [];
      this._afterSuccessfulUpdate = [];
      this._afterSuccessfulDestroy = [];
      this._afterFailingCreate = [];
      this._afterFailingUpdate = [];
      return this._afterFailingDestroy = [];
    },
    callbacksFor: function(callbacksCollection, args) {
      _(callbacksCollection).each(function(func) {
        return func.apply(this, args);
      });
      return this;
    },
    afterCreate: function() {
      return this.registerCallbacks.call(this, this._afterSuccessfulCreate, arguments);
    },
    afterUpdate: function() {
      return this.registerCallbacks.call(this, this._afterSuccessfulUpdate, arguments);
    },
    afterDestroy: function() {
      return this.registerCallbacks.call(this, this._afterSuccessfulDestroy, arguments);
    },
    afterFailingCreate: function() {
      return this.registerCallbacks.call(this, this._afterFailingCreate, arguments);
    },
    afterFailingUpdate: function() {
      return this.registerCallbacks.call(this, this._afterFailingUpdate, arguments);
    },
    afterFailingDestroy: function() {
      return this.registerCallbacks.call(this, this._afterFailingDestroy, arguments);
    },
    registerCallbacks: function(callbacksContainer) {
      var _this = this;
      return _(Array.prototype.slice.call(arguments[1])).each(function(func) {
        return _this.registerCallback(callbacksContainer, func);
      });
    },
    registerCallback: function(callbacksContainer, func) {
      if (typeof func === 'function') {
        return callbacksContainer.push(func);
      }
    }
  };

  Sharkbone.Modules.CUD = {
    create: function(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (typeof options.preventDefault === "function") {
        options.preventDefault();
      }
      if (typeof options.stopPropagation === "function") {
        options.stopPropagation();
      }
      return this.collection.create(this.model, {
        success: function() {
          return _this.runCallbacksFor(_this._afterSuccessfulCreate, _this.model);
        },
        error: function() {
          return _this.runCallbacksFor(_this._afterFailingCreate, _this.model);
        }
      });
    },
    update: function(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (typeof options.preventDefault === "function") {
        options.preventDefault();
      }
      if (typeof options.stopPropagation === "function") {
        options.stopPropagation();
      }
      return this.model.save(void 0, {
        success: function() {
          return _this.runCallbacksFor(_this._afterSuccessfulUpdate, _this.model);
        },
        error: function() {
          return _this.runCallbacksFor(_this._afterFailingUpdate, _this.model);
        }
      });
    },
    destroy: function(id, options) {
      var model,
        _this = this;
      if (id == null) {
        id = {};
      }
      if (options == null) {
        options = {};
      }
      if (typeof id.preventDefault === "function") {
        id.preventDefault();
      }
      if (typeof id.stopPropagation === "function") {
        id.stopPropagation();
      }
      if ((id != null) && (this.collection != null) && (model = this.collection.get(id))) {
        model.destroy({
          success: function() {
            return _this.runCallbacksFor(_this._afterSuccessfulDestroy, _this.model);
          },
          error: function() {
            return _this.runCallbacksFor(_this._afterFailingDestroy, _this.model);
          }
        });
        return this.collection.remove(this.collection.get(id));
      } else if (this.model != null) {
        return this.model.destroy({
          success: function() {
            return _this.runCallbacksFor(_this._afterSuccessfulDestroy, _this.model);
          },
          error: function() {
            return _this.runCallbacksFor(_this._afterFailingDestroy, _this.model);
          }
        });
      } else {
        throw new Error('Missing reference for destroying an object, forgot to supply an ID?');
      }
    },
    runCallbacksFor: function() {
      return typeof this.callbacksFor === "function" ? this.callbacksFor.apply(this, arguments) : void 0;
    }
  };

  Sharkbone.Modules.PaginationControls = (function() {

    function PaginationControls() {}

    PaginationControls.prototype.requestPreviousPage = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return this.collection.goTo(this.collection.paginator_ui.currentPage -= 1);
    };

    PaginationControls.prototype.requestNextPage = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return this.collection.goTo(this.collection.paginator_ui.currentPage += 1);
    };

    PaginationControls.prototype.goToPage = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return this.collection.goTo(this.collection.paginator_ui.currentPage = parseInt($(e.currentTarget).attr('data-value')));
    };

    PaginationControls.prototype.goToFirst = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return this.collection.goTo(this.collection.paginator_ui.currentPage = this.collection.firstPage);
    };

    PaginationControls.prototype.goToLast = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return this.collection.goTo(this.collection.paginator_ui.currentPage = this.collection.lastPage);
    };

    PaginationControls.prototype.noPage = function(e) {
      e.preventDefault();
      return e.stopPropagation();
    };

    return PaginationControls;

  })();

  Sharkbone.Modules.Render = (function() {

    function Render() {}

    Render.prototype.paginatorSelector = '.pagination';

    Render.prototype.render = function() {
      this.$el.html('');
      return this;
    };

    Render.prototype.renderData = function(template, context) {
      this.$el.append(template(context));
      return this;
    };

    Render.prototype.renderResource = function(template, model) {
      this.$el.append(template());
      this.modelBinder.bind(model, this.el, this.bindings());
      return this;
    };

    Render.prototype.renderCollection = function(template, collection, containerSelector) {
      this.$el.append(template());
      this.collectionBinder.bind(collection, this.$(containerSelector));
      return this;
    };

    Render.prototype.renderPagination = function() {
      $(this.paginatorSelector).html(this.collection.getPager());
      return this;
    };

    return Render;

  })();

  Sharkbone.View = (function(_super) {

    __extends(View, _super);

    function View() {
      View.__super__.constructor.apply(this, arguments);
    }

    _.extend(View, Sharkbone.Mixin);

    View.include(Sharkbone.ViewManager);

    View.include(Sharkbone.Modules.CUD);

    View.include(Sharkbone.Modules.CUDCallbacks);

    View.include(Sharkbone.Modules.Render);

    View.include(Sharkbone.Modules.PaginationControls);

    View.prototype.initialize = function() {
      View.__super__.initialize.apply(this, arguments);
      _.bindAll(this);
      this.initializePaginatedCollection();
      this.initializeModelBinding();
      if (typeof this.initializeCudContainers === "function") {
        this.initializeCudContainers();
      }
      return this;
    };

    View.prototype.initializePaginatedCollection = function() {
      if ((this.collection != null) && _.isFunction(this.collection.getPager)) {
        this.listenTo(this.collection, 'reset', this.renderPagination);
      }
      return this;
    };

    View.prototype.initializeModelBinding = function() {
      if (Backbone.ModelBinder != null) {
        this.modelBinder = new Backbone.ModelBinder();
      }
      return this;
    };

    View.prototype.buildCollectionBinder = function(childTemplate, bindings) {
      return new Backbone.CollectionBinder(new Backbone.CollectionBinder.ElManagerFactory(childTemplate(), bindings()));
    };

    View.prototype.bindings = function() {
      throw new Error('You must define the bindings method in your view!');
    };

    View.prototype.events = {
      "click .close-self": "close",
      "click .first-page": "goToFirst",
      "click .prev-page": "requestPreviousPage",
      "click .next-page": "requestNextPage",
      "click .last-page": "goToLast",
      "click .page-marker": "goToPage",
      "click .no-page": "noPage",
      "click a.show_detail": function(e) {
        return e.stopPropagation();
      },
      "click a.edit": function(e) {
        return e.stopPropagation();
      }
    };

    View.prototype.close = function(e) {
      e.preventDefault();
      this.remove();
      return this.goToIndex();
    };

    View.prototype.remove = function() {
      if (this.modelBinder != null) {
        this.modelBinder.unbind();
      }
      if (this.collectionBinder != null) {
        this.collectionBinder.unbind();
      }
      return this.$el.remove();
    };

    return View;

  })(Backbone.View);

}).call(this);
