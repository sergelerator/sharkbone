// Generated by CoffeeScript 1.5.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe('Initializers', function() {
    var subject;
    subject = Sharkbone.App.Initializers;
    it('should be defined', function() {
      return expect(subject).toBeDefined();
    });
    describe('initializeRouters', function() {
      it('should be a function', function() {
        return expect(subject.initializeRouters).toEqual(jasmine.any(Function));
      });
      return describe('called from Sharkbone.App context', function() {
        beforeEach(function() {
          Sharkbone.App.Routers.First = (function(_super) {

            __extends(First, _super);

            function First() {
              First.__super__.constructor.apply(this, arguments);
            }

            return First;

          })(Sharkbone.Router);
          Sharkbone.App.Routers.Second = (function(_super) {

            __extends(Second, _super);

            function Second() {
              Second.__super__.constructor.apply(this, arguments);
            }

            return Second;

          })(Sharkbone.Router);
          spyOn(Sharkbone.App.Routers, 'First');
          return spyOn(Sharkbone.App.Routers, 'Second');
        });
        afterEach(function() {
          Sharkbone.App.activeRouters = [];
          return Sharkbone.App.Routers = {};
        });
        it('should create an instance of the First Router', function() {
          subject.initializeRouters.apply(Sharkbone.App);
          return expect(Sharkbone.App.Routers.First).toHaveBeenCalled();
        });
        it('should create an instance of the Second Router', function() {
          subject.initializeRouters.apply(Sharkbone.App);
          return expect(Sharkbone.App.Routers.Second).toHaveBeenCalled();
        });
        return it('should create an activeRouters attribute with 2 routers', function() {
          subject.initializeRouters.apply(Sharkbone.App);
          expect(Sharkbone.App.activeRouters).toBeDefined();
          return expect(Sharkbone.App.activeRouters.length).toEqual(2);
        });
      });
    });
    return describe('setupBackboneRelational', function() {
      return it('should be a function', function() {
        return expect(subject.setupBackboneRelational).toEqual(jasmine.any(Function));
      });
    });
  });

}).call(this);
