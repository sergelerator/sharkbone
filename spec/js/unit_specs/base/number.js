// Generated by CoffeeScript 1.5.0
(function() {

  describe('Number', function() {
    var subject;
    subject = null;
    beforeEach(function() {
      return subject = Number;
    });
    it('should be able to define methods', function() {
      return expect(subject.define).toBeDefined();
    });
    it('should have an errVal property', function() {
      return expect(subject.prototype.errVal).toBeDefined();
    });
    describe('toInt', function() {
      beforeEach(function() {
        return subject = subject.prototype.toInt;
      });
      it('should be defined', function() {
        return expect(subject).toBeDefined();
      });
      it('should return itself when called from an Int', function() {
        var a;
        a = 4;
        return expect(a.toInt()).toEqual(4);
      });
      return it('should strip the decimal part when called from a Float', function() {
        var a;
        a = 4.44;
        return expect(a.toInt()).toEqual(4);
      });
    });
    describe('toF', function() {
      beforeEach(function() {
        return subject = subject.prototype.toF;
      });
      it('should be defined', function() {
        return expect(subject).toBeDefined();
      });
      it('should return itself when called from an Int', function() {
        var a;
        a = 4;
        return expect(a.toF()).toEqual(4);
      });
      return it('should return itself  when called from a Float', function() {
        var a;
        a = 4.44;
        return expect(a.toF()).toEqual(4.44);
      });
    });
    describe('plus', function() {
      beforeEach(function() {
        return subject = subject.prototype.plus;
      });
      it('should be defined', function() {
        return expect(subject).toBeDefined();
      });
      it('should properly sum the provided value to self', function() {
        var a;
        a = 4;
        return expect(a.plus(8)).toEqual(12);
      });
      it('should properly sum a Float and an Int value', function() {
        var a;
        a = 4.44;
        return expect(a.plus(4)).toBeCloseTo(8.44, 4);
      });
      it('should properly sum an Int and a Float value', function() {
        var a;
        a = 4;
        return expect(a.plus(4.35)).toBeCloseTo(8.35, 4);
      });
      return it('should properly sum two Float values', function() {
        var a;
        a = 4.23;
        return expect(a.plus(4.35)).toBeCloseTo(8.58, 4);
      });
    });
    describe('minus', function() {
      beforeEach(function() {
        return subject = subject.prototype.minus;
      });
      it('should be defined', function() {
        return expect(subject).toBeDefined();
      });
      it('should properly substract the provided value to self', function() {
        var a;
        a = 4;
        return expect(a.minus(2)).toEqual(2);
      });
      it('should properly substract an Int from a Float value', function() {
        var a;
        a = 4.44;
        return expect(a.minus(1)).toBeCloseTo(3.44, 4);
      });
      it('should properly substract a Float from an Int value', function() {
        var a;
        a = 4;
        return expect(a.minus(1.35)).toBeCloseTo(2.65, 4);
      });
      return it('should properly substract a Float from a Float value', function() {
        var a;
        a = 4.23;
        return expect(a.minus(2.35)).toBeCloseTo(1.88, 4);
      });
    });
    describe('by', function() {
      beforeEach(function() {
        return subject = subject.prototype.by;
      });
      it('should be defined', function() {
        return expect(subject).toBeDefined();
      });
      it('should properly multiply by the provided value', function() {
        var a;
        a = 4;
        return expect(a.by(8)).toEqual(32);
      });
      it('should properly multiply a Float by an Int', function() {
        var a;
        a = 4.50;
        return expect(a.by(4)).toBeCloseTo(18, 4);
      });
      it('should properly multiply an Int by a Float', function() {
        var a;
        a = 4;
        return expect(a.by(3.2)).toBeCloseTo(12.8, 4);
      });
      return it('should properly multiply two Float values', function() {
        var a;
        a = 2.5;
        return expect(a.by(2.5)).toBeCloseTo(6.25, 4);
      });
    });
    return describe('divideBy', function() {
      beforeEach(function() {
        return subject = subject.prototype.divideBy;
      });
      it('should be defined', function() {
        return expect(subject).toBeDefined();
      });
      it('should properly divide by the provided value', function() {
        var a;
        a = 8;
        return expect(a.divideBy(4)).toEqual(2);
      });
      it('should properly divide a Float by an Int', function() {
        var a;
        a = 4.50;
        return expect(a.divideBy(2)).toBeCloseTo(2.25, 4);
      });
      it('should properly divide an Int by a Float', function() {
        var a, b, _ref;
        _ref = [3, 9], a = _ref[0], b = _ref[1];
        expect(a.divideBy(1.5)).toBeCloseTo(2, 4);
        return expect(b.divideBy(3.5)).toBeCloseTo(2.5714, 4);
      });
      return it('should properly divide two Float values', function() {
        var a;
        a = 14.5;
        return expect(a.divideBy(3.4)).toBeCloseTo(4.2647, 4);
      });
    });
  });

}).call(this);
